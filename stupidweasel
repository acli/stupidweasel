#!/usr/bin/perl
# vi: set sw=3 ai sm:
#
# Stupid hack to use Evolution as a mail transport so that we can use mutt if necessary

use strict;
use integer;

use Getopt::Long qw(:config no_auto_abbrev bundling);
use POSIX;

use vars qw( $outbox $sources );
$outbox = "$ENV{HOME}/.local/share/evolution/mail/local/.Outbox";
$sources = "$ENV{HOME}/.config/evolution/sources";

use vars qw( $mtaid );
$mtaid = 'stupidweasel';

use vars qw( $appName $hostname $id );
use vars qw( $tmp $out );

use vars qw( $mode );
use vars qw( %targets );

$appName = $& if $0 =~ /[^\/]+$/;
$hostname = `hostname`; chomp $hostname;

$id = sprintf('%d.%d', time, $$);
$tmp = "$outbox/tmp/$id";
$out = "$outbox/cur/$id";

use vars qw( $debug_p $dry_run_p );
use vars qw( %identity );

$SIG{__DIE__} = sub {
   if (-f $tmp) {
      print STDERR "$appName: Removing temporary file $tmp\n";
      unlink $tmp;
   }
};

sub show_version_then_exit () {
   print "$mtaid ($appName) 0.1\n";
   exit(0);
}

sub show_usage_then_exit (;$) {
   my($status) = @_;
   my $h = $status? *STDERR: *STDOUT;
   print $h <<EOF;
usage: $appName [OPTION] ...
Queue a piece of email into Evolution's Outbox.

  -q, --list       list queued emails in outbox
      --delete=ID  delete queued email with ID from outbox
  -t, --add        add email in standard input to outbox (default)
  -d, --debug      enable debugging messages
  -n, --dry-run    do not actually modify the outbox
      --help       show this help and exit
      --version    output version information and exit
EOF
   exit($status);
}

sub read_data (;*) {
   my($h) = @_;
   my $it;
   my $section;
   my $state = 0;
   for (;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      chomp $s;
      if ($s =~ /^\s*(?:\s*$|#|;|\/\/)/) {
         ;
      } elsif ($s =~ /^\s*\[(.*?)\]\s*$/) {
         die "$appName: $ARGV:$.: $1: duplicate section\n" if defined $it && defined $it->{$1};
         $section = $1;
      } elsif ($s =~ /^\s*([^=]+?)\s*=\s*(.*?)\s*$/) {
         $it->{$section} = { 'name' => [$section] } unless defined $it && defined $it->{$section};
         $it->{$section}->{$1} = [] unless defined $it->{$section}->{$1};
         push @{$it->{$section}->{$1}}, $2;
      } else {
         die "$appName: $ARGV:$.: sorry, can't parse ($s)\n";
      }
   }
   return $it;
}

sub get_scalar ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key} && defined $datum->{$key}->[0])? undef: $datum->{$key}->[0];
}

sub get_array ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key})? undef: $datum->{$key};
}

sub read_evolution_sources () {
   opendir(SOURCES, $sources) || die "$appName: $sources: $!\n";
   for (;;) {
      my $dirent = readdir SOURCES;
   last unless defined $dirent;
      if ($dirent =~ /\.source$/) {
	 open(DATA, '<', "$sources/$dirent") || die "$appName: $sources/$dirent: $!\n";
	 my $data = read_data DATA;
	 my $mail_account = $data->{'Mail Account'};
	 my $authentication = $data->{'Authentication'};
	 if (defined $mail_account && defined $authentication) {
	    my $uid = get_scalar('IdentityUid', $mail_account);
	    my $email = get_scalar('User', $authentication);
	    if (defined $uid && defined $email) {
	       print STDERR "$appName: $dirent: Detected email ($email) with X-Evolution-Identity ($uid)\n" if $debug_p;
	       $identity{+lc $email} = $uid;
	    }
	 }
	 close DATA;
      }
   }
   closedir SOURCES;
}

sub display_outbox_summary () {
   my $fmt = "%-16s  %s\n";
   opendir(OUTBOX, "$outbox/cur") || die "$appName: $outbox/cur: $!\n";
   for (my $something_done_p;;) {
      my $dirent = readdir OUTBOX;
   last unless defined $dirent;
      my $candidate = "$outbox/cur/$dirent";
      if (-f $candidate && $dirent =~ /^([^:]+)(?::2,(.*)|$)/) {
	 my($basename, $flags) = ($1, $2);
	 my $deleted = $flags =~ /T/;
	 if (!$deleted) {
	    if (!$something_done_p) {
	       printf $fmt, 'Id', 'Queued';
	       $something_done_p = 1;
	    }
	    my $mtime = (stat $candidate)[9];
	    printf $fmt, $basename, POSIX::strftime('%Y-%m-%d %H:%M:%S', localtime $mtime);
	 }
      }
   }
   closedir OUTBOX;
}

sub remove_queued_email () {
   opendir(OUTBOX, "$outbox/cur") || die "$appName: $outbox/cur: $!\n";
   for (;;) {
      my $dirent = readdir OUTBOX;
   last unless defined $dirent;
      if (-f "$outbox/cur/$dirent" && $dirent =~ /^([^:]+)(?::2,(.*)|$)/) {
	 my($basename, $flags) = ($1, $2);
	 my $deleted = $flags =~ /T/;
	 if (defined $targets{$basename}) {
	    if ($deleted) {
	       printf "$appName: %s: Already in Trash\n", $basename;
	    } elsif (!$flags) {	# Evolution hasn't seen it yet
	       my $target = "$outbox/cur/$dirent";
	       if ($dry_run_p) {
		  printf "$appName: Pretending to delete %s\n", $target;
	       } else {
		  unlink $target || warn "$appName: $target: $!\n";
	       }
	    } else {		# Evolution has already seen it
	       my $target = "$basename:2,T$flags";
	       if ($dry_run_p) {
		  printf "$appName: Pretending to rename %s to %s\n", $dirent, $target;
	       } else {
		  rename "$outbox/cur/$dirent", "$outbox/cur/$target" || die "$appName: $outbox/cur/$dirent: $!\n";
	       }
	    }
	 }
      }
   }
   closedir OUTBOX;
}

sub copy_stdin_to_outbox () {
   open(OUTPUT, '>', $tmp) || die "$appName: $tmp: $!\n";
   my($from, $uid);
   for (my $in_body_p = 0;;) {
      my $s = scalar <STDIN>;
   last unless defined $s;
      print OUTPUT $s;
      if ($in_body_p == 0) {
	 if ($s eq "\n") {
	    $in_body_p = 1;
	 } elsif ($s =~ /^From:.*<([^<>]*)>/is || $s =~ /^From:\s*(\S+?)\s*\(.*?\)\s*$/is || $s =~ /^From:\s*(\S+)\s*$/is) {
	    $from = $1;
	    $uid = $identity{+lc $from};
	    print STDERR "$appName: Detected from ($from)\n" if $debug_p;
	    die "$appName: $from: Identity not found in evolution config\n" unless defined $uid;
	    printf OUTPUT "X-Evolution-Identity: %s\n", $uid;
	    printf OUTPUT "Received: (from $<\@localhost) by $hostname ($mtaid) id <$id>; %s\n",
		  POSIX::strftime('%a, %e %b %Y %H:%M:%S %z', localtime time);
	 }
      } else {
	 ;
      }
   }
   die "$appName: From header not detected\n" unless defined $uid;
   close OUTPUT;
   print STDERR "$appName: Moving ($tmp) -> ($out)\n" if $debug_p;
   rename $tmp, $out || die "$appName: $out: Rename to \"$out\" failed\n";
}

$mode = $1 if $appName =~ /(q|rm)$/;
GetOptions(
   'q|list'	=> sub { $mode = 'q'; },
   'delete=s'	=> sub { $mode = 'rm'; $targets{$_[1]} = 0; },
   't|add'	=> sub { $mode = undef; },
   'd|debug'	=> \$debug_p,
   'n|dry-run'	=> \$dry_run_p,
   'help'	=> \&show_usage_then_exit,
   'version'	=> \&show_version_then_exit,
) || show_usage_then_exit(1);

($tmp, $out) = ("$id.tmp", "$id.out") if $dry_run_p;
$ENV{LANG} = 'C';

read_evolution_sources;
if ($mode eq 'q') {
   display_outbox_summary;
} elsif ($mode eq 'rm') {
   remove_queued_email;
} else {
   copy_stdin_to_outbox;
}
