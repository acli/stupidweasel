#!/usr/bin/perl
# vi: set sw=3 ai sm:
=encoding UTF-8
=head1 Name

stupidweasel – stupid hack to weasel your mails out into the real world
=cut
# Copyright ©2020 by Ambrose Li <ambrose.li@gmail.com>

use strict;
use integer;

use Getopt::Long qw(:config no_auto_abbrev bundling);
use POSIX;

use v5.14; # //u modifier
use utf8;
use open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );
use feature "unicode_strings";

use vars qw( $outbox $sources $signatures );
$outbox = "$ENV{HOME}/.local/share/evolution/mail/local/.Outbox";
$sources = "$ENV{HOME}/.config/evolution/sources";
$signatures = "$ENV{HOME}/.config/evolution/signatures";

use vars qw( $mtaid );
$mtaid = 'stupidweasel';

use vars qw( $appName $hostname $id );
use vars qw( $tmp $out );

use vars qw( $expected_recipient );
use vars qw( $mode $initial_mode );
use vars qw( %dsn_option );
use vars qw( %targets );
use vars qw( $status );

$appName = $& if $0 =~ /[^\/]+$/;
$hostname = `hostname`; chomp $hostname;

$id = sprintf('%d.%d.%s', time, $$, $hostname);
$tmp = "$outbox/tmp/$id";
$out = "$outbox/cur/$id:2,";	# see spec on cr.yp.to

use vars qw( $debug_p $dry_run_p );
use vars qw( $force_delete_p );
use vars qw( $interactive_p );
use vars qw( $verbose_p );
use vars qw( %identity );
use vars qw( %signature );

$force_delete_p = 1;

=head1 Synopsis

B<stupidweasel> [B<-d>] [B<-N> I<dsn>] [B<-n>] [B<-v>] [I<email...>]

B<stupidweasel> B<--list> [B<-d>] [B<-v>]

B<stupidweasel> B<--delete> [B<-d>] [B<-i>] [B<-v>] [I<id...>]

B<stupidweasel> B<--help>

B<stupidweasel> B<--version>

=head1 Description

F<stupidweasel> is a small Perl script intended as a drop-in replacement for L<sendmail(8)>
on systems having no functional B<sendmail>
but a working installation of Evolution.
Its sole purpose is to allow you to use of text-mode email clients such as L<mutt(1)>,
and it does this by putting any mail it receives in Evolution’s Outbox
after adding a header to let Evolution know which server to use for sending.

Because all it does is to put your emails into Evolution Outbox,
to actually send them out you have to manually press the Send/Receive button in Evolution.

F<stupidweasel> only handles outgoing mail;
to read mail with a text email client you might need a second script
that acts as an Evolution filter.

=head2 Email signatures

If you have multiple email accounts set up in Evolution,
you might have different signatures set up for different accounts.
To use the correct signature when using a text email client,
you can create a .signature file with only one line that reads

=over

(*$insert_signature_here*)

=back

When F<stupidweasel> receives a piece of mail with this directive,
it will look up the correct signature file from your Evolution configuration
and replace this directive with the correct signature file
or the output of the correct signature script.

=head2 Cancelling a send

Because all F<stupidweasel> does is to put your emails in Evolution’s outbox,
you can cancel your sends until you hit Evolution’s Send/Receive button.
To do this, you need to find our your email’s ID number by using F<stupidweasel>’s C<--list> option.

After you’ve found out your email’s ID number,
use F<stupidweasel>’s C<--delete> option to delete it.
=cut

$SIG{__DIE__} = sub {
   if (-f $tmp) {
      print STDERR "$appName: Removing temporary file $tmp\n" if $debug_p;
      unlink $tmp;
   }
};

sub show_version_then_exit () {
   print "$mtaid ($appName) 0.1\n";
   exit(0);
}

sub show_usage_then_exit (;$) {
   my($status) = @_;
   my($default_list, $default_add, $default_rm, $summary);
   my $h = $status? *STDERR: *STDOUT;
   if ($initial_mode eq 'q') {
      $summary = "List contents of Evolution's Outbox";
      $default_list = ' (default)';
   } elsif ($initial_mode eq 'rm') {
      $summary = "Removes a piece of email from Evolution's Outbox";
      $default_rm = ' (default)';
   } else {
      $default_add = ' (default)';
      $summary = "Queue a piece of email into Evolution's Outbox";
   }
   print $h <<EOF;
usage: $appName [OPTION] ...
$summary.

  -d, --debug        enable debugging messages
      --delete=ID    delete queued email with ID from outbox$default_rm
  -i, --interactive  prompt before every removal
  -N, --dsn=WORD     ignored for compatibility
  -n, --dry-run      do not actually modify the outbox
  -q, --list         list queued emails in outbox$default_list
  -t, --add          add email in standard input to outbox$default_add
  -v, --verbose      use long-form queue listings and show a little more detail
      --help         show this help and exit
      --version      output version information and exit

Report bugs to <https://github.com/acli/stupidweasel/issues>.
EOF
   exit($status);
}

=head1 DSN options

F<stupidweasel> accepts a B<sendmail>-compatible B<-N> option
(which means it must be followed by either the world B<never>,
or a comma-separate list of words where each word is either B<failure>, B<delay>, or B<success>),
but the option is currently ignored.
We have no control over the actual SMTP handshake that Evolution will perform
so we have no influence over delivery status notifications.
=cut

sub set_dsn_options ($) {
   my($s) = @_;
   # FIXME: We make sure the value is sendmail-compatible, but we don't actually act on it
   if ($s eq 'never') {
      %dsn_option = ();
   } else {
      for my $option (split(/,/, $s)) {
	 if ($option =~ /^(failure|delay|success)$/) {
	    $dsn_option{$1} = 1;
	 } else {
	    die "$appName: Argument to -N can only be either \"never\", or a comma-separated list of \"failure\", \"delay\", \"success\"\n";
	 }
      }
   }
}

=head1 Internals

=head2 looks_like_email_address_p (...)

looks_like_email_address_p takes an array of strings
and determines if I<all> of the strings look like valid email addresses.
It returns 1 if they all look valid, 0 otherwise.
=cut

sub looks_like_email_address_p {
   my $it = 1; # assume it's true then disprove it
   for my $s (@_) {
      $it = 0 unless $s =~ /^[^\@]+\@[a-z][-0-9a-z]*(?:\.[a-z][-0-9a-z]*)+$/;
   last unless $it;
   }
   return $it;
}
for my $test (qw( abc@example.com abc.def@u-example.de abc.def-ghi@ocad.on.ca )) {
   die "Test case $test failed" unless looks_like_email_address_p $test;
}
for my $test (qw( abc@ @u-example.de @ foo )) {
   die "Test case $test failed" unless !looks_like_email_address_p $test;
}

=head2 read_data, get_scalar, get_array – reading ini files

The three functions read_data, get_scalar and get_array do generic ini file reading
and come from my other projects (that’s why the data structure read_data builds looks so odd).

read_data takes a filehandle of an ini file and builds a hash of hashes of arrays that represents the file.
The first-level hash represents sections in the ini file where the keys are the names of the sections.

get_scalar takes a key and a section hash and returns a string representing
the first value indexed with the given key in the given section
(undef is returned if no key-value pair with the given key exists).

get_array does the same thing as get_scalar except it returns an array representing
all values indexed with the given key.
=cut

sub read_data (;*) {
   my($h) = @_;
   my $it;
   my $section;
   my $state = 0;
   for (;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      chomp $s;
      if ($s =~ /^\s*(?:\s*$|#|;|\/\/)/) {
         ;
      } elsif ($s =~ /^\s*\[(.*?)\]\s*$/) {
         die "$appName: $ARGV:$.: $1: duplicate section\n" if defined $it && defined $it->{$1};
         $section = $1;
      } elsif ($s =~ /^\s*([^=]+?)\s*=\s*(.*?)\s*$/) {
         $it->{$section} = { 'name' => [$section] } unless defined $it && defined $it->{$section};
         $it->{$section}->{$1} = [] unless defined $it->{$section}->{$1};
         push @{$it->{$section}->{$1}}, $2;
      } else {
         die "$appName: $ARGV:$.: sorry, can't parse ($s)\n";
      }
   }
   return $it;
}

sub get_scalar ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key} && defined $datum->{$key}->[0])? undef: $datum->{$key}->[0];
}

sub get_array ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key})? undef: $datum->{$key};
}

=head2 read_evolution_sources ()

read_evolution_sources goes through all ini files in the Evolution F<sources> directory
to populate the global hashes C<%sources> and C<%signatures>.
This allows F<stupidweasel> to determine how to generate the X-Evolution-Identity header
so that Evolution will send your mail through the correct SMTP server;
this also allows F<stupidweasel> to determine which signature file should be used
so that it can correctly process the C<(*insert_signature_here*)> directive.

read_evolution_sources assumes S<[Authentication] User> and S<[Mail Identity] Address> use the same email addresses.
=cut

sub read_evolution_sources () {
   opendir(SOURCES, $sources) || die "$appName: $sources: $!\n";
   for (;;) {
      my $dirent = readdir SOURCES;
   last unless defined $dirent;
      if ($dirent =~ /\.source$/) {
	 open(DATA, '<', "$sources/$dirent") || die "$appName: $sources/$dirent: $!\n";
	 my $data = read_data DATA;
	 my $data_source = $data->{'Data Source'};
	 my $mail_account = $data->{'Mail Account'};
	 my $mail_identity = $data->{'Mail Identity'};
	 my $authentication = $data->{'Authentication'};
	 if (defined $mail_account && defined $authentication) {
	    my $uid = get_scalar('IdentityUid', $mail_account);
	    my $email = get_scalar('User', $authentication);
	    if (defined $uid && defined $email) {
	       printf STDERR "%s: %s: Detected email (%s) with X-Evolution-Identity (%s)\n", $appName, $dirent, $email, $uid if $debug_p;
	       $identity{+lc $email} = $uid;
	    }
	 } elsif (defined $mail_identity) {
	    my $email = get_scalar('Address', $mail_identity);
	    my $signature = get_scalar('SignatureUid', $mail_identity);
	    if (defined $email && defined $signature) {
	       printf STDERR "%s: %s: Detected email (%s) with signature (%s)\n", $appName, $dirent, $email, $signature if $debug_p;
	       $signature{+lc $email} = $signature;
	    }
	 }
	 close DATA;
      }
   }
   closedir SOURCES;
}

=head2 scan_mbox_file( I<filename>, I<f_header>, I<f_sep>, I<f_body> )

scan_mbox_file is a general-purpose deterministic finite-state machine
for reading mails that are in maildir format.
It opens the given I<filename> for reading,
then for each line read call either I<f_header>, I<f_sep>, or I<f_body>
depending on whether it’s processing input in the (RFC822) header,
the blank line between the header and body,
or the (RFC822) body of the mail.

All of I<f_header>, I<f_sep>, and I<f_body> must be closures.
Any other type of value (including undef) will cause a runtime error.
=cut

sub scan_mbox_file ($$$$) {
   my($filename, $f_header, $f_sep, $f_body) = @_;
   my $state = 0;			# State 0 - From_ or header; 1 - header, separator; 3 - body
   my($from_, @headers);
   my $h;
   if (!$filename || $filename eq '-') {
      ($filename, $h) = ('STDIN', *STDIN);
   } else {
      open MBOX, '<', $filename || die "$filename: $!\n";
      $h = *MBOX;
   }
   for (my $in_body_p = 0;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      if ($state == 0 && $s =~ /^From /s) {
	 $from_ = $s;
	 $state = 1;
      } elsif ($state <= 1) {
	 $state = 1;
	 if ($s eq "\n") {
	    for my $header ($from_, @headers) {
	       &$f_header($header->[0], $filename, $header->[1]);
	    }
	    &$f_sep($s, $filename, $.);
	    $state = 3;
	 } elsif ($s =~ /^\s/s) {
	    die "$filename: $.: Illegal continuation header\n" unless @headers;
	    $headers[$#headers]->[0] .= $s;
	 } elsif ($s !~ /:/s) {
	    die "$filename: $.: Malformed header, no colon\n";
	 } else {
	    push @headers, [$s, $.];
	 }
      } elsif ($state == 3) {
	 &$f_body($s, $filename, $.);
      } else {
	 die "$filename: $.: Internal error: Unexpected state $state\n";
      }
   }
   close MBOX;
}

sub user_interactively_confirms (;$) {
   my($prompt) = @_;
   $prompt = 'Remove?' unless defined $prompt;
   printf STDERR "%s: %s ", $appName, $prompt;
   flush STDERR;
   my $s = scalar <STDIN>;
   return defined $s && $s =~ /^\s*(?:y|yes)/i;
}

sub display_outbox_summary () {
   my $fmt = "%-30s  %-19s  %-9s  %-24s%0.0s  %s\n";
   my $n = 0;
   $fmt = "[%s]\nQueued:\t%s\nBy:\t%s\nFrom:\t%s <%s>\nTo:\t%s\n\n" if $verbose_p;
   opendir(OUTBOX, "$outbox/cur") || die "$appName: $outbox/cur: $!\n";
   for (my $something_done_p;;) {
      my $dirent = readdir OUTBOX;
   last unless defined $dirent;
      my $candidate = "$outbox/cur/$dirent";
      if (-f $candidate && $dirent =~ /^([^:]+)(?::2,(.*)|$)/) {
	 my($basename, $flags) = ($1, $2);
	 my $deleted = $flags =~ /T/;
	 my $evolution_identity;
	 if (!$deleted) {
	    my($date, $from, $to, $user_agent);
	    scan_mbox_file($candidate, sub {
		     my($s, $filename, $lineno) = @_;
		     if ($s =~ /^From:.*<([^<>]*)>/is || $s =~ /^From:\s*(\S+?)\s*\(.*?\)\s*$/is || $s =~ /^From:\s*(\S+)\s*$/is) {
			$from = $1;
		     } elsif ($s =~ /^To:.*<([^<>]*)>/is || $s =~ /^To:\s*(\S+?)\s*\(.*?\)\s*$/is || $s =~ /^To:\s*(\S+)\s*$/is) {
			$to = $1;
		     } elsif ($s =~ /^Date:\s*(.*?)\s*$/is) {
			$date = $1;
		     } elsif ($s =~ /^(?:User-Agent|X-Mailer):\s*(.*?)\s*$/is) {
			$user_agent = $1;
		     } elsif ($s =~ /^X-Evolution-Identity:\s*(.*?)\s*$/is) {
			$evolution_identity = $1;
		     }
		  }, sub { return; }, sub { return; });

	    if (!$something_done_p) {
	       printf $fmt, 'Id', 'Queued', 'By', 'From', '', 'To' unless $verbose_p;
	       $something_done_p = 1;
	    }
	    if (defined $user_agent && !$verbose_p) {
	       $user_agent =~ s/\([^\(\)]*\)//gs;
	       $user_agent =~ s/ {2,}/ /gs;
	       $user_agent =~ s/\s*\n/\n/gs;
	       $user_agent =~ s/[\/\s].*//s; # cut out any version information, for brevity
	    }
	    my $mtime = (stat $candidate)[9];
	    printf $fmt, $basename, POSIX::strftime('%Y-%m-%d %H:%M:%S', localtime $mtime), $user_agent, $from, $evolution_identity, $to;
	    $n += 1;
	 }
      }
   }
   closedir OUTBOX;
   printf "$n mail(s) queued in $outbox\n" if $verbose_p;
}

sub remove_queued_email () {
   my $remove_all_p = (keys %targets == 1 && defined $targets{'-'});
   opendir(OUTBOX, "$outbox/cur") || die "$appName: $outbox/cur: $!\n";
   for (;;) {
      my $dirent = readdir OUTBOX;
   last unless defined $dirent;
      if (-f "$outbox/cur/$dirent" && $dirent =~ /^([^:]+)(?::2,(.*)|$)/) {
	 my($basename, $flags) = ($1, $2);
	 my $deleted = $flags =~ /T/;
	 if ($remove_all_p || defined $targets{$basename}) {
	    if ($interactive_p && !user_interactively_confirms("Remove ‘$basename’?")) {
	       ;
	    } elsif ($deleted) {
	       print "$appName: $basename: Already in Trash\n";
	    } elsif (!$flags || $force_delete_p) {	# Evolution hasn't seen it yet, or -f used
	       my $target = "$outbox/cur/$dirent";
	       if ($dry_run_p) {
		  print "$appName: Pretending to delete $target\n";
	       } elsif (unlink $target) {
		  printf "$basename permanently deleted from $outbox\n" if $verbose_p;
	       } else {
		  warn "$appName: Could not delete $basename: $!\n";
		  $status = 1;
	       }
	    } else {		# Evolution has already seen it
	       my $target = "$basename:2,T$flags";
	       if ($dry_run_p) {
		  print "$appName: Pretending to rename $dirent to $target\n";
	       } elsif (rename "$outbox/cur/$dirent", "$outbox/cur/$target") {
		  printf "$basename marked as Trashed\n" if $verbose_p;
	       } else {
		  warn "$appName: Could not mark $basename as Trashed: $!\n";
		  $status = 1;
	       }
	    }
	    delete $targets{$basename};
	 }
      }
   }
   if (!$remove_all_p) {
      for my $orphan (sort keys %targets) {
	 warn "$appName: $orphan: Not found in Outbox\n";
	 $status = 1;
      }
   }
   closedir OUTBOX;
}

sub copy_signature_to (*$$) {
   my($h, $from, $uid) = @_;
   my $signature = $signature{+lc $from};
   if ($signature) {
      $signature = "$signatures/$signature";
      while (-l $signature) {
	 $signature = readlink $signature;
      }
      print STDERR "$appName: Signature for $from <$uid> resolves to ($signature)\n" if $debug_p;
      if (-f $signature) {
	 my $st = open(SIGNATURE, (-x $signature? '-|': '<'), $signature) || die "$appName: Could not open signature for $from <$uid>: $!\n";
	 my $newline_needed_p;
	 print STDERR "$appName: pipe to $signature opened, pid is $st" if $debug_p && -x $signature;
	 for (;;) {
	    my $s = scalar <SIGNATURE>;
	 last unless defined $s;
	    $h->print($s);
	    $newline_needed_p = 1 unless $s =~ /\n$/s;
	 }
	 close SIGNATURE;
	 print $h "\n" if $newline_needed_p;
      } else {
	 die "$appName: Signature for $from <$uid> did not resolve to an existing file\n";
      }
   } else {
      print STDERR "$appName: No signature found for $from <$uid>\n" if $debug_p;
   }
}

sub copy_stdin_to_outbox () {
   open(OUTPUT, '>', $tmp) || die "$appName: $tmp: $!\n";
   printf OUTPUT "Received: (from %d\@localhost) by %s (%s) id <%s>; %s\n",
	 $<, $hostname, $mtaid, $id,
	 POSIX::strftime('%a, %e %b %Y %H:%M:%S %z', localtime time);

   warn "$appName: -N option ignored because we have no control over DSN\n" if ($verbose_p || $debug_p) && (join(',', sort keys %dsn_option) ne 'delay,failure');
   my($from, $uid);
   sub check_for_valid_uid ($) { my($uid) = @_; die "$appName: From header not detected or sender not valid\n" unless defined $uid; }
   scan_mbox_file('-', sub {
	    my($s, $filename, $lineno) = @_;
	    if ($s =~ /^From:.*<([^<>]*)>/is || $s =~ /^From:\s*(\S+?)\s*\(.*?\)\s*$/is || $s =~ /^From:\s*(\S+)\s*$/is) {
	       $from = $1;
	       $uid = $identity{+lc $from};
	       print STDERR "$appName: Detected from ($from)\n" if $debug_p;
	       die "$appName: $from: Identity not found in evolution config\n" unless defined $uid;
	    }
	    print OUTPUT $s;
	 }, sub {
	    my($s, $filename, $lineno) = @_;
	    check_for_valid_uid $uid;
	    print OUTPUT "X-Evolution-Identity: $uid\n";
	    print OUTPUT $s;
	 }, sub {
	    my($s, $filename, $lineno) = @_;
	    if ($s =~ /^\s*\(\*\$insert_signature_here\*\)\s*\n/s) {
	       copy_signature_to OUTPUT, $from, $uid;
	    } else {
	       print OUTPUT $s;
	    }
	 });
   close OUTPUT;
   check_for_valid_uid $uid; # in case we got just headers and no body
   print STDERR "$appName: Moving ($tmp) -> ($out)\n" if $debug_p;
   rename $tmp, $out || die "$appName: $out: Rename to \"$out\" failed\n";
}

$mode = $1 if $appName =~ /(q|rm)$/;
$initial_mode = $mode;
GetOptions(
   'f|force'		=> \$force_delete_p,
   'q|list'		=> sub { $mode = 'q'; },
   'delete=s'		=> sub { $mode = 'rm'; $targets{$_[1]} = 0; },
   't|add'		=> sub { $mode = undef; },
   'd|debug'		=> \$debug_p,
   'i|interactive'	=> \$interactive_p,
   'N|dsn=s'		=> sub { set_dsn_options($_[1]); },
   'n|dry-run'		=> \$dry_run_p,
   'v|verbose'		=> \$verbose_p,
   'help'		=> \&show_usage_then_exit,
   'version'		=> \&show_version_then_exit,
) || show_usage_then_exit(1);

if ($mode eq 'rm') {
   for my $arg (@ARGV) {
      $targets{$arg} = 0;
   }
   @ARGV = ();
} elsif (!$mode) {
   for my $arg (@ARGV) {
      die "$appName: $arg: Does not seem to be a valid email address\n" unless looks_like_email_address_p $arg;
      $expected_recipient = $arg;
   }
   @ARGV = ();
}
die "$appName: Unknown options @ARGV\n" if @ARGV && $mode ne 'rm';

($tmp, $out) = ("$id.tmp", "$id.out") if $dry_run_p;
$ENV{LANG} = 'C';

read_evolution_sources;
if ($mode eq 'q') {
   display_outbox_summary;
} elsif ($mode eq 'rm') {
   remove_queued_email;
} else {
   copy_stdin_to_outbox;
}
exit $status;

=head1 See also

L<evolution(1)>,
L<muttrc(5)>

L<Novell, Inc.
I<Novell Evolution 2.4 User Guide>.
Waltham, MA: Novell, 2005.|https://www.novell.com/documentation/evolution24/pdfdoc/evolution24/evolution24.pdf>.

L<The Dovecot Wiki; “Maildir”.
Last updated May 11, 2017.|https://wiki2.dovecot.org/MailboxFormat/Maildir>.

L<Bernstein, D. J.
“Using maildir format”.
n.d.|https://cr.yp.to/proto/maildir.html>.

=head1 Reporting bugs

Please report bugs through L<Github|https://github.com/acli/stupidweasel/issues>.
=cut
