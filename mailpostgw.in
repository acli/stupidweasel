#!/usr/bin/perl
# vi: set sw=3 ai sm:
=encoding UTF-8

=head1 Name

mailpostgw - mailpost gateway

=cut
# Copyright ©2020 by Ambrose Li <ambrose.li@gmail.com>

use strict;
use integer;

use Getopt::Long qw(:config no_auto_abbrev bundling);
use Data::Dumper;
use POSIX;

use v5.14; # //u modifier
use utf8;
use open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );
use feature "unicode_strings";

use vars qw( $mailpost $newsuser );
$mailpost = '@@MAILPOST@@';
$newsuser = '@@NEWSUSER@@';

use vars qw( $appName $hostname $id );
use vars qw( $tag );
use vars qw( $status );
use vars qw( %localgroups $lists );

use vars qw( @original_argv );
@original_argv = @ARGV;

$appName = $& if $0 =~ /[^\/]+$/;
$hostname = `hostname`; chomp $hostname;

use vars qw( $debug_p $dry_run_p );
use vars qw( $force_delete_p );
use vars qw( $interactive_p );
use vars qw( $keep_going_p );
use vars qw( $verbose_p );

$SIG{__DIE__} = sub {
};

sub show_version_then_exit () {
   print "$appName 0.1\n";
   exit(0);
}

sub show_usage_then_exit (;$) {
   my($status) = @_;
   my($default_inject, $summary);
   my $h = $status? *STDERR: *STDOUT;
   $summary = "Inject into news system if post comes from a recognized mailing list";
   print $h <<EOF;
usage: $appName [OPTION] ...
$summary.

  -d, --debug        enable debugging messages
  -i, --interactive  prompt before every removal
  -k, --keep-going   always keep reading until eof (INTERNAL USE ONLY)
  -n, --dry-run      do not actually modify the outbox
      --tag=TAG      tag debug messages with given TAG (INTERNAL USE ONLY)
  -v, --verbose      use long-form queue listings and show a little more detail
      --help         show this help and exit
      --version      output version information and exit

Report bugs to <https://github.com/acli/stupidweasel/issues>.
EOF
   exit($status);
}

sub debug_message ($) {
   my($msg) = @_;
   my $prefix = "$appName: ";
   $prefix .= "$tag: " if defined $tag;
   chomp $msg;
   print STDERR "$prefix$msg\n";
}

sub check_for_correct_user () {
   my $correct_uid = (getpwnam($newsuser))[2];
   debug_message "DEBUG: current uid is $<, euid $>; expecting uid $correct_uid" if $debug_p;
   if ($> != $correct_uid) {
      my $flag = 'MAILPOSTGW_WAS_HERE';
      die "$appName: Failed to switch uid to $newsuser\n" if defined $ENV{$flag};
      my @cmd = ('sudo', '-n', '-u', $newsuser, '--', $0, @original_argv);
      debug_message sprintf 'Executing command: %s', join(' ', @cmd) if $debug_p || $verbose_p;
      flush STDERR;
      exec { $cmd[0] } @cmd;
      die "$appName: $cmd[0]: $!\n";
   }
}

## BEGIN: STOLEN STUFF FROM STUPIDWEASEL ################################################

=head2 read_data, get_scalar, get_array – reading ini files

The three functions read_data, get_scalar and get_array do generic ini file reading
and come from my other projects (that’s why the data structure read_data builds looks so odd).

read_data takes a filehandle of an ini file and builds a hash of hashes of arrays that represents the file.
The first-level hash represents sections in the ini file where the keys are the names of the sections.

get_scalar takes a key and a section hash and returns a string representing
the first value indexed with the given key in the given section
(undef is returned if no key-value pair with the given key exists).

get_array does the same thing as get_scalar except it returns an array representing
all values indexed with the given key.
=cut

sub read_data (;*) {
   my($h) = @_;
   my $it;
   my $section;
   my $state = 0;
   for (;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      chomp $s;
      chop $s if $s =~ /\r$/s; # Let's see if Evolution was the problem =P
      if ($s =~ /^\s*(?:\s*$|#|;|\/\/)/) {
         ;
      } elsif ($s =~ /^\s*\[(.*?)\]\s*$/) {
         die "$appName: $ARGV:$.: $1: duplicate section\n" if defined $it && defined $it->{$1};
         $section = $1;
      } elsif ($s =~ /^\s*([^=]+?)\s*=\s*(.*?)\s*$/) {
         $it->{$section} = { 'name' => [$section] } unless defined $it && defined $it->{$section};
         $it->{$section}->{$1} = [] unless defined $it->{$section}->{$1};
         push @{$it->{$section}->{$1}}, $2;
      } else {
         die "$appName: $ARGV:$.: sorry, can't parse ($s)\n";
      }
   }
   return $it;
}

sub get_scalar ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key} && defined $datum->{$key}->[0])? undef: $datum->{$key}->[0];
}

sub get_array ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key})? undef: $datum->{$key};
}

=head1 Internals

=head2 looks_like_email_address_p (...)

looks_like_email_address_p takes an array of strings
and determines if I<all> of the strings look like valid email addresses.
It returns 1 if they all look valid, 0 otherwise.
=cut

sub looks_like_email_address_p {
   my $it = 1; # assume it's true then disprove it
   for my $s (@_) {
      $it = 0 unless $s =~ /^[^\@]+\@[a-z][-0-9a-z]*(?:\.[a-z][-0-9a-z]*)+$/;
   last unless $it;
   }
   return $it;
}
for my $test (qw( abc@example.com abc.def@u-example.de abc.def-ghi@ocad.on.ca )) {
   die "Test case $test failed" unless looks_like_email_address_p $test;
}
for my $test (qw( abc@ @u-example.de @ foo )) {
   die "Test case $test failed" unless !looks_like_email_address_p $test;
}

=head2 scan_mbox_file( I<filename>, I<f_header>, I<f_sep>, I<f_body> )

scan_mbox_file is a general-purpose deterministic finite-state machine
for reading mails that are in maildir format.
It opens the given I<filename> for reading,
then for each line read call either I<f_header>, I<f_sep>, or I<f_body>
depending on whether it’s processing input in the (RFC822) header,
the blank line between the header and body,
or the (RFC822) body of the mail.

All of I<f_header>, I<f_sep>, and I<f_body> must be closures.
Any other type of value (including undef) will cause a runtime error.
=cut

sub scan_mbox_file ($$$$$) {
   my($filename, $f_from_, $f_header, $f_sep, $f_body) = @_;
   my $state = 0;			# State 0 - From_ or header; 1 - header, separator; 3 - body
   my($from_, @headers);
   my $h;
   if (!$filename || $filename eq '-') {
      ($filename, $h) = ('STDIN', *STDIN);
   } else {
      open MBOX, '<', $filename || die "$filename: $!\n";
      $h = *MBOX;
   }
   for (my $in_body_p = 0;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      if ($state == 0 && $s =~ /^From /s) {
	 $from_ = [$s, $.];
	 $state = 1;
      } elsif ($state <= 1) {
	 $state = 1;
	 if ($s eq "\n") {
	    &$f_from_($from_->[0], $filename, $from_->[1]) if defined $from_ && defined $f_from_;
	    for my $header (@headers) {
	       &$f_header($header->[0], $filename, $header->[1]) if defined $f_header;
	    }
	    &$f_sep($s, $filename, $.) if defined $f_sep;
	    $state = 3;
	 } elsif ($s =~ /^\s/s) {
	    die "$filename: $.: Illegal continuation header\n" unless @headers;
	    $headers[$#headers]->[0] .= $s;
	 } elsif ($s !~ /:/s) {
	    die "$filename: $.: Malformed header, no colon\n";
	 } else {
	    push @headers, [$s, $.];
	 }
      } elsif ($state == 3) {
	 &$f_body($s, $filename, $.) if defined $f_body;
      } else {
	 die "$filename: $.: Internal error: Unexpected state $state\n";
      }
   }
   close MBOX;
}

## END OF STOLEN STUFF ################################################

sub read_localgroups () {
}

sub read_config_file () {
   my $input = 'lists.dat';
   open INPUT, '<', $input || die "$input: $!\n";
   $lists = read_data INPUT;
   close INPUT;
}

sub extract_possible_email_address_from ($) {
   my($det) = @_;
   $det = $1 if $det =~ /^.*<([^<>]*)>/is || $det =~ /^(\S+?)\s*\(.*?\)\s*$/is || $det =~ /^(\S+)\s*$/is;
   return $det;
}

sub known_mailing_lists_for ($) {
   my($det) = @_;
   my %newsgroups;
   debug_message "DEBUG: candidate email ($det)" if $debug_p;
   for my $section (keys %$lists) {
      if ($section ne '') {
	 my $list = $lists->{$section};
	 for my $chk (($list->{'address'}? @{$list->{'address'}}: ()), ($list->{'id'})? @{$list->{'id'}}: ()) {
	    if (lc $det eq lc $chk) {
	       debug_message "DEBUG: $det matches $chk" if $debug_p;
	       for my $groups (get_array('localgroup', $list)) {
		  for my $group (@$groups) {
		     $newsgroups{$group} = { 'organization' => get_scalar('organization', $list) };
		  }
	       }
	    }
	 }
      }
   }
   return %newsgroups;
}

sub determine_newsgroups_from_header_hash ($) {
   my($headers) = @_;
   my %newsgroups;
   for my $candidate ('from', 'to', 'cc', 'delivered-to', 'mailing-list', 'list-id') {
      my $candidates = get_array($candidate, $headers);
      if (defined $candidates) {
	 for my $det (@$candidates) {
	    my %det = known_mailing_lists_for(extract_possible_email_address_from($det));
	    for my $group (keys %det) {
	       $newsgroups{$group} = $det{$group};
	    }
	 }
      }
   }
   if (!%newsgroups && (defined $headers->{'list-id'} || defined $headers->{'list-unsubscribe'})) {
      my $junk = get_scalar('junk', $lists->{''});
      $junk = 'junk' unless defined $junk;
      $newsgroups{$junk} = {};
      debug_message "DEBUG: no lists recognized but List-Id or List-Unsubscribe header found, putting in $junk" if $debug_p;
   }
   debug_message sprintf "DEBUG: newsgroups: %s", join(', ', sort keys %newsgroups) if $debug_p;
   return %newsgroups;
}

sub post_article_and_leave_OUTPUT_open ($$$$) {
   my($newsgroups, $headers, $sep, $body) = @_;
   my @cmdline = ($mailpost, '-d', 'local', sort keys %$newsgroups);
   if ($dry_run_p) {
      debug_message sprintf 'Pretending to execute command: %s', join(' ', @cmdline) if $debug_p || $verbose_p;
      open(OUTPUT, ($debug_p > 1? '>&STDERR': '>/dev/null'));
   } else {
      debug_message sprintf 'Executing command: %s', join(' ', @cmdline) if $debug_p || $verbose_p;
      flush STDERR;
      my $st = open(OUTPUT, '|-');
      die "$appName: $mailpost: fork: $!\n" unless defined $st;
      if (!$st) {
	 exec { $cmdline[0] } @cmdline;
	 die "$appName: $mailpost: exec: $!\n";
      }
   }
   if (defined $headers) {
      for my $header (@$headers) {
	 if ($header =~ /^(Status|X-Evolution-[^:]+)\s*:/ || $header =~ /^((?:ARC|X-BHAM-STAMP|DKIM)-[^:]+)\s*:/) {
	    debug_message "Discarding $1 header" if $debug_p;
	 } else {
	    print OUTPUT $header;
	 }
      }
   }
   if (defined $sep) {
      for my $s (@$sep) {
	 print OUTPUT $s;
      }
   }
   if (defined $body) {
      for my $s (@$body) {
	 print OUTPUT $s;
      }
   }
}

sub newsgroups_list_is_the_blackhole_p ($) {
   my($newsgroups) = @_;
   return defined $newsgroups && keys %$newsgroups == 1 && (keys %$newsgroups)[0] eq '/dev/null';
}

sub inject_header ($$$;$) {
   my($s, $headers, $header_dict, $announce_p) = @_; # $s, \@headers, \%headers
   if ($s =~ /^([^:]+)\s*:\s*(.*?)\s*$/s) {
      my($key, $val) = (lc $1, $2);
      if ($val) {
	 push @$headers, $s;
	 push @{$header_dict->{$key}}, $val;
	 debug_message "DEBUG: Injecting $s" if $announce_p && $debug_p;
      } else {
	 debug_message "Discarding $key header with no value" if $debug_p;
	 undef $s;
      }
   } else {
      debug_message "INTERNAL ERROR: Received invalid header \"$s\" from scan_mbox_file" if $debug_p;
      undef $s;
   }
   return $s;
}

sub inject_organization_header_if_not_present ($$$) {
   my($newsgroups, $headers, $header_dict) = @_; # \%newsgroups, \@headers, \%headers
   my $it;
   if (!defined $header_dict->{'organization'}) {
      my $organization = $newsgroups->{+(keys(%$newsgroups))[0]}->{'organization'};
      $it = inject_header sprintf('Organization: %s', ($organization || 'Unknown')), $headers, $header_dict, 1;
   }
   return $it;
}

sub look_at_stdin () {
   my(@headers, %headers);
   my %newsgroups;
   my $blackhole_p;
   my($multipart_mixed_p, $boundary, @preamble, @mime_parts, $L2_state, $L2_headers, $L3_headers, $hold_p, $digest_p);
   scan_mbox_file('-',
	 # From_
	 undef,

	 # headers
	 sub {
	    my($s, $filename, $lineno) = @_;
	    inject_header($s, \@headers, \%headers);

	 # separator
	 }, sub {
	    my($s, $filename, $lineno) = @_;

	    # Figure out if this came from some mailing list
	    %newsgroups = determine_newsgroups_from_header_hash \%headers;
	    if (%newsgroups && !newsgroups_list_is_the_blackhole_p(\%newsgroups)) {
	       # If it didn't come with an Organization header fabricate a reasonable one because having ours in the post makes no sense.
	       inject_organization_header_if_not_present(\%newsgroups, \@headers, \%headers);

	       # Post the article unless it MIGHT be a MIME digest
	       if (get_scalar('mime-version', \%headers) eq '1.0'
			&& get_scalar('content-type', \%headers) =~ /^multipart\/mixed;.*?\bboundary=(["'])?([^\1]+)\1/is) {

		  ($hold_p, $multipart_mixed_p, $boundary) = (1, 1, $2);
		  debug_message "Delaying article post due to detected multipart/mixed, boundary $boundary" if $debug_p || $verbose_p;
	       } else {
		  post_article_and_leave_OUTPUT_open(\%newsgroups, \@headers, [$s], undef);
	       }
	    } else {
	       debug_message sprintf 'No mailing list detected in input, %s.', ($keep_going_p? 'discarding rest': 'terminating') if $debug_p || $verbose_p;
	       exit unless $keep_going_p;
	       $blackhole_p = 1
	    }

	 # body
	 }, sub {
	    my($s, $filename, $lineno) = @_;
	    if ($blackhole_p) {
	       ;
	    } elsif (!$hold_p && !$digest_p) {
	       print OUTPUT $s;
	    } else {
	       if ($L2_state == 0) { # preamble before blank line
		  push @preamble, $s;
		  $L2_state = 1 if $s =~ /^\r?\n$/s;
	       } elsif ($L2_state == 1) { # preamble after blank line
		  push @preamble, $s;
		  if ($s =~ /^--$boundary\r?\n$/s) {
		     $L2_state = 2;
		     $L2_headers = {}; push @mime_parts, {'headers' => [], 'sep' => [], 'body' => []}; # create blank attachment
		     debug_message sprintf 'DEBUG: attachment %d', scalar @mime_parts if $debug_p;
		  } elsif ($s =~ /^--$boundary--\r?\n$/s) {
		     $hold_p = 0;
		  }
	       } elsif ($L2_state == 2) { # attachment header
		  my $this_part = $mime_parts[$#mime_parts];
		  if ($s =~ /^\r?\n$/s) {
		     push @{$this_part->{'sep'}}, $s;
		     $L2_state = 3;

		     # If we're in digest mode already, check if the attachment is message/rfc822
		     if ($digest_p) {
			my $type = lc $1 if get_scalar('content-type', $L2_headers) =~ /^([^;\s]+)/;
			if ($type eq 'message/rfc822') {
			   post_article_and_leave_OUTPUT_open(\%newsgroups, undef, undef, undef); # real article is in the digest part body
			   debug_message sprintf 'DEBUG: posting attachment %d', scalar @mime_parts if $debug_p;
			} else {
			   debug_message sprintf "DEBUG: ignoring attachment %d of wrong type %s", scalar @mime_parts, $type if $debug_p;
			}

		     # Otherwise check if this attachment is a MIME digest, in which case we activate digest mode
		     } else {
			my $L2_boundary = $2 if get_scalar('content-type', $L2_headers) =~ /^multipart\/digest\s*;.*?\bboundary=(["'])?([^\1]+)\1/is;
			if ($L2_boundary) {
			   debug_message sprintf "DEBUG: resetting MIME state because found MIME digest, boundary $L2_boundary" if $debug_p;
			   ($L2_state, $digest_p, $boundary) = (4, 1, $L2_boundary);
			}
		     }
		  } else {
		     inject_header($s, $this_part->{'headers'}, $L2_headers);
		  }
	       } elsif ($L2_state == 3) { # attachment body
		  if ($digest_p) {
		     print OUTPUT $s unless $s =~ /^--$boundary(?:--)?\r?\n$/s;
		  } else {
		     push @{$mime_parts[$#mime_parts]->{'body'}}, $s;
		  }
		  if ($s =~ /^--$boundary\r?\n$/s) {
		     close OUTPUT if $digest_p;
		     $L2_state = 2;
		     $L2_headers = {}; push @mime_parts, {'headers' => [], 'sep' => [], 'body' => []}; # create blank attachment
		     debug_message sprintf 'DEBUG: attachment %d', scalar @mime_parts if $debug_p;
		  } elsif ($s =~ /^--$boundary--\r?\n$/s) {
		     if ($digest_p) {
			$blackhole_p = 1;
		     } else {
			$hold_p = 0;
		     }
		  }
	       } elsif ($L2_state == 4) { # MIME digest preamble
		  if ($s =~ /^--$boundary\r?\n$/s) {
		     $L2_state = 2;
		     $L2_headers = {}; @mime_parts = ({'headers' => [], 'sep' => [], 'body' => []}); # reinitialize and create blank attachment
		     debug_message sprintf 'DEBUG: attachment %d', scalar @mime_parts if $debug_p;
		  } elsif ($s =~ /^--$boundary--\r?\n$/s) { # this should never happen
		     $blackhole_p = 0;
		  }
	       } else {
		  die "INTERNAL ERROR: L2_state $L2_state not handled!\n";
	       }
	       if (!$hold_p) {
		  debug_message sprintf 'DEBUG: releasing hold and posting article' if $debug_p;
		  post_article_and_leave_OUTPUT_open(\%newsgroups, \@headers, ["\n"], \@preamble);
		  for my $part (@mime_parts) {
		     for my $key ('headers', 'sep', 'body') {
			for my $s (@{$part->{$key}}) {
			   print OUTPUT $s;
			}
		     }
		  }
	       }
	    }
	 });
   close OUTPUT;
}

printf STDERR "DEBUG: $appName: called with arguments [(%s)]\n", join(') (', @ARGV) if join('', map { "!$_!" } @ARGV) =~ /!(?:-d|--debug)!/; # detect --debug before calling GetOptions

GetOptions(
   'd|debug'		=> sub { $debug_p += 1; },
   'k|keep-going'	=> \$keep_going_p,
   'n|dry-run'		=> \$dry_run_p,
   'tag=s'		=> \$tag,
   'v|verbose'		=> \$verbose_p,
   'help'		=> \&show_usage_then_exit,
   'version'		=> \&show_version_then_exit,
) || show_usage_then_exit(1);

die "$appName: Unknown options @ARGV\n" if @ARGV;

$ENV{LANG} = 'C';

check_for_correct_user;
read_config_file;
look_at_stdin;
exit $status;

=head1 Description

F<mailpostgw> uses Evolution’s filter feature to simulate mail delivery to a pipe,
so that INN’s L<mailpost(8)> mail-to-news gateway can function on a system with no functional L<sendmail(8)>.

F<mailpostgw> reads a maildir-format mail (the format used by Evolution) from standard input.
It first reads the mail’s headers.
If it detects a recognized mailing list,
it creates a pipe to L<mailpost> to send the headers, then continues to pipe the rest of the mail to L<mailpost>;
if no mailing list is detected it simply exits.

=head1 Bugs

MIME digests (e.g., as sent by CE-L) are not correctly handled.
If the real L<mailpost(8)> isn’t correctly handling them
we’ll have to break up the MIME parts ourselves.

=head1 See also

L<mailpost(8)>,
L<stupidweasel(8)>

=head1 Reporting bugs

Please report bugs through L<Github|https://github.com/acli/stupidweasel/issues>.
=cut
