#!/usr/bin/perl
# vi: set sw=3 ai sm:
=encoding UTF-8

=head1 Name

mailpostgw - mailpost gateway

=cut
# Copyright ©2020 by Ambrose Li <ambrose.li@gmail.com>

use strict;
use integer;

use Getopt::Long qw(:config no_auto_abbrev bundling);
use Data::Dumper;
use POSIX;

use v5.14; # //u modifier
use utf8;
use open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );
use feature "unicode_strings";

use vars qw( $localgroups $mailpost );
use vars qw( $newsuser $installed_path );
$localgroups = '/opt/inn/etc/localgroups';
$mailpost = '/opt/inn/bin/mailpost';
$newsuser = 'news';
$installed_path = '/usr/local/sbin/mailpostgw';

use vars qw( $appName $hostname $id );
use vars qw( $status );
use vars qw( %localgroups $lists );

$appName = $& if $0 =~ /[^\/]+$/;
$hostname = `hostname`; chomp $hostname;

use vars qw( $debug_p $dry_run_p );
use vars qw( $force_delete_p );
use vars qw( $interactive_p );
use vars qw( $verbose_p );

$SIG{__DIE__} = sub {
};

sub show_version_then_exit () {
   print "$appName 0.1\n";
   exit(0);
}

sub show_usage_then_exit (;$) {
   my($status) = @_;
   my($default_inject, $summary);
   my $h = $status? *STDERR: *STDOUT;
   $summary = "Inject into news system if post comes from a recognized mailing list";
   print $h <<EOF;
usage: $appName [OPTION] ...
$summary.

  -d, --debug        enable debugging messages
  -i, --interactive  prompt before every removal
  -n, --dry-run      do not actually modify the outbox
  -v, --verbose      use long-form queue listings and show a little more detail
      --help         show this help and exit
      --version      output version information and exit

Report bugs to <https://github.com/acli/stupidweasel/issues>.
EOF
   exit($status);
}

sub check_for_correct_user () {
   my $correct_uid = (getpwnam($newsuser))[2];
   if ($> != $correct_uid) {
      my $flag = 'MAILPOSTGW_WAS_HERE';
      die "$appName: Failed to switch uid to $newsuser\n" if defined $ENV{$flag};
      my @cmd = ('sudo', '-u', $newsuser, $0);
      exec { $cmd[0] } @cmd || die "$appName: $cmd[0]: $!\n";
   }
}

## BEGIN: STOLEN STUFF FROM STUPIDWEASEL ################################################

=head2 read_data, get_scalar, get_array – reading ini files

The three functions read_data, get_scalar and get_array do generic ini file reading
and come from my other projects (that’s why the data structure read_data builds looks so odd).

read_data takes a filehandle of an ini file and builds a hash of hashes of arrays that represents the file.
The first-level hash represents sections in the ini file where the keys are the names of the sections.

get_scalar takes a key and a section hash and returns a string representing
the first value indexed with the given key in the given section
(undef is returned if no key-value pair with the given key exists).

get_array does the same thing as get_scalar except it returns an array representing
all values indexed with the given key.
=cut

sub read_data (;*) {
   my($h) = @_;
   my $it;
   my $section;
   my $state = 0;
   for (;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      chomp $s;
      if ($s =~ /^\s*(?:\s*$|#|;|\/\/)/) {
         ;
      } elsif ($s =~ /^\s*\[(.*?)\]\s*$/) {
         die "$appName: $ARGV:$.: $1: duplicate section\n" if defined $it && defined $it->{$1};
         $section = $1;
      } elsif ($s =~ /^\s*([^=]+?)\s*=\s*(.*?)\s*$/) {
         $it->{$section} = { 'name' => [$section] } unless defined $it && defined $it->{$section};
         $it->{$section}->{$1} = [] unless defined $it->{$section}->{$1};
         push @{$it->{$section}->{$1}}, $2;
      } else {
         die "$appName: $ARGV:$.: sorry, can't parse ($s)\n";
      }
   }
   return $it;
}

sub get_scalar ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key} && defined $datum->{$key}->[0])? undef: $datum->{$key}->[0];
}

sub get_array ($$) {
   my($key, $datum) = @_;
   return !(defined $datum && defined $datum->{$key})? undef: $datum->{$key};
}

=head1 Internals

=head2 looks_like_email_address_p (...)

looks_like_email_address_p takes an array of strings
and determines if I<all> of the strings look like valid email addresses.
It returns 1 if they all look valid, 0 otherwise.
=cut

sub looks_like_email_address_p {
   my $it = 1; # assume it's true then disprove it
   for my $s (@_) {
      $it = 0 unless $s =~ /^[^\@]+\@[a-z][-0-9a-z]*(?:\.[a-z][-0-9a-z]*)+$/;
   last unless $it;
   }
   return $it;
}
for my $test (qw( abc@example.com abc.def@u-example.de abc.def-ghi@ocad.on.ca )) {
   die "Test case $test failed" unless looks_like_email_address_p $test;
}
for my $test (qw( abc@ @u-example.de @ foo )) {
   die "Test case $test failed" unless !looks_like_email_address_p $test;
}

=head2 scan_mbox_file( I<filename>, I<f_header>, I<f_sep>, I<f_body> )

scan_mbox_file is a general-purpose deterministic finite-state machine
for reading mails that are in maildir format.
It opens the given I<filename> for reading,
then for each line read call either I<f_header>, I<f_sep>, or I<f_body>
depending on whether it’s processing input in the (RFC822) header,
the blank line between the header and body,
or the (RFC822) body of the mail.

All of I<f_header>, I<f_sep>, and I<f_body> must be closures.
Any other type of value (including undef) will cause a runtime error.
=cut

sub scan_mbox_file ($$$$) {
   my($filename, $f_header, $f_sep, $f_body) = @_;
   my $state = 0;			# State 0 - From_ or header; 1 - header, separator; 3 - body
   my($from_, @headers);
   my $h;
   if (!$filename || $filename eq '-') {
      ($filename, $h) = ('STDIN', *STDIN);
   } else {
      open MBOX, '<', $filename || die "$filename: $!\n";
      $h = *MBOX;
   }
   for (my $in_body_p = 0;;) {
      my $s = scalar <$h>;
   last unless defined $s;
      if ($state == 0 && $s =~ /^From /s) {
	 $from_ = $s;
	 $state = 1;
      } elsif ($state <= 1) {
	 $state = 1;
	 if ($s eq "\n") {
	    for my $header ($from_, @headers) {
	       &$f_header($header->[0], $filename, $header->[1]);
	    }
	    &$f_sep($s, $filename, $.);
	    $state = 3;
	 } elsif ($s =~ /^\s/s) {
	    die "$filename: $.: Illegal continuation header\n" unless @headers;
	    $headers[$#headers]->[0] .= $s;
	 } elsif ($s !~ /:/s) {
	    die "$filename: $.: Malformed header, no colon\n";
	 } else {
	    push @headers, [$s, $.];
	 }
      } elsif ($state == 3) {
	 &$f_body($s, $filename, $.);
      } else {
	 die "$filename: $.: Internal error: Unexpected state $state\n";
      }
   }
   close MBOX;
}

## END OF STOLEN STUFF ################################################

sub read_localgroups () {
}

sub read_config_file () {
   my $input = 'lists.dat';
   open INPUT, '<', $input || die "$input: $!\n";
   $lists = read_data INPUT;
   close INPUT;
}

sub look_at_stdin () {
   my(@headers, %headers);
   my %newsgroups;
   scan_mbox_file('-', sub {
	    my($s, $filename, $lineno) = @_;
	    push @headers, $s;
	    push @{$headers{+lc $1}}, $2 if $s =~ /^([^:]+)\s*:\s*(.*)/s;
	 }, sub {
	    my($s, $filename, $lineno) = @_;
	    for my $candidate ('from', 'to', 'cc', 'delivered-to', 'mailing-list', 'list-id') {
	       if (defined $headers{$candidate}) {
		  for my $det (@{$headers{$candidate}}) {
		     $det = $1 if $det =~ /^.*<([^<>]*)>/is || $det =~ /^(\S+?)\s*\(.*?\)\s*$/is || $det =~ /^(\S+)\s*$/is;
		     for my $section (keys %$lists) {
			my $list = $lists->{$section};
			for my $chk (($list->{'address'}? @{$list->{'address'}}: ()), ($list->{'id'})? @{$list->{'id'}}: ()) {
			   if (lc $det eq lc $chk) {
			      print STDERR "DEBUG: $det matches $chk\n" if $debug_p;
			      for my $groups (get_array('localgroup', $list)) {
				 for my $group (@$groups) {
				    $newsgroups{$group} = 1;
				 }
			      }
			   }
			}
		     }
		  }
	       }
	    }
	    if (!%newsgroups && (defined $headers{'list-id'} || defined $headers{'list-unsubscribe'})) {
	       my $junk = get_scalar('junk', $lists->{''});
	       $junk = 'junk' unless defined $junk;
	       $newsgroups{$junk} = 1;
	       print STDERR "DEBUG: no lists recognized but List-Id or List-Unsubscribe header found, putting in $junk\n" if $debug_p;
	    }
	    printf STDERR "DEBUG: newsgroups: %s\n", join(', ', sort keys %newsgroups) if $debug_p;
	    if (%newsgroups) {
	       my @cmdline = ($mailpost, '-d', 'local', sort keys %newsgroups);
	       printf STDERR "Executing command: %s\n", join(' ', @cmdline) if $debug_p || $verbose_p;
	       my $st = open(OUTPUT, '|-', $mailpost, [@cmdline[1..$#cmdline]]) || die "$appName: $mailpost: $!\n";
	       for my $header (@headers) {
		  print OUTPUT $header;
	       }
	       print OUTPUT $s;
	    } else {
	       exit;
	    }
	 }, sub {
	    my($s, $filename, $lineno) = @_;
	    print OUTPUT $s;
	 });
   close OUTPUT;
}

GetOptions(
   'd|debug'		=> \$debug_p,
   'n|dry-run'		=> \$dry_run_p,
   'v|verbose'		=> \$verbose_p,
   'help'		=> \&show_usage_then_exit,
   'version'		=> \&show_version_then_exit,
) || show_usage_then_exit(1);

die "$appName: Unknown options @ARGV\n" if @ARGV;

print STDERR "DEBUG: running as uid $< ($>)\n" if $debug_p;

$ENV{LANG} = 'C';

check_for_correct_user;
read_config_file;
look_at_stdin;
exit $status;

=head1 Description

F<mailpostgw> uses Evolution’s filter feature to simulate mail delivery to a pipe,
so that INN’s L<mailpost(8)> mail-to-news gateway can function on a system with no functional L<sendmail(8)>.

F<mailpostgw> reads a maildir-format mail (the format used by Evolution) from standard input.
It first reads the mail’s headers.
If it detects a recognized mailing list,
it creates a pipe to L<mailpost> to send the headers, then continues to pipe the rest of the mail to L<mailpost>;
if no mailing list is detected it simply exits.


=head1 See also

L<mailpost(8)>,
L<stupidweasel(8)>

=head1 Reporting bugs

Please report bugs through L<Github|https://github.com/acli/stupidweasel/issues>.
=cut
