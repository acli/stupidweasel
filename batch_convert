#!/usr/bin/perl
# vi: set sw=3 ai sm:
# Batch convert your mailbox into news
# Copyright Â©2020 by Ambrose Li <ambrose.li@gmail.com>

use strict;
use integer;

use Getopt::Long qw(:config no_auto_abbrev bundling);
use POSIX;

use v5.14; # //u modifier
use utf8;
use open qw( :encoding(UTF-8) :std );
use charnames qw( :full :short );
use feature "unicode_strings";

use vars qw( $appName $hostname $id );

use vars qw( $status );

$appName = $& if $0 =~ /[^\/]+$/;
$hostname = `hostname`; chomp $hostname;

use vars qw( $debug_p $dry_run_p );
use vars qw( $verbose_p );
use vars qw( $skip );

$SIG{__DIE__} = sub {
};

sub show_version_then_exit () {
   print "$appName 0.1\n";
   exit(0);
}

sub show_usage_then_exit (;$) {
   my($status) = @_;
   my $h = $status? *STDERR: *STDOUT;
   print $h <<EOF;
usage: $appName [OPTION] ...
Feed every mail in your local mailbox into mailpostgw.

  -d, --debug        enable debugging messages
  -n, --dry-run      do not actually run mailpost
  -v, --verbose      explain what is being done
      --help         show this help and exit
      --version      output version information and exit

Report bugs to <https://github.com/acli/stupidweasel/issues>.
EOF
   exit($status);
}

GetOptions(
   'd|debug'		=> \$debug_p,
   'n|dry-run'		=> \$dry_run_p,
   'skip=i'		=> \$skip,
   'v|verbose'		=> \$verbose_p,
   'help'		=> \&show_usage_then_exit,
   'version'		=> \&show_version_then_exit,
) || show_usage_then_exit(1);

my $mailbox = "/var/mail/$ENV{USER}";
my($n, $size_i, $size_total, $pipe_opened_p);
open INPUT, '<:perlio', $mailbox || die "$appName: $mailbox: $!\n";
for (;;) {
   my $s = scalar <INPUT>;
last if eof INPUT;
   if ($verbose_p) {
      use bytes;
      my $m = length $s;
      $size_i += $m;
      $size_total += $m;
   }
   if ($s =~ /^From /) {
      if ($pipe_opened_p) {
	 close OUTPUT;
	 print STDERR "$appName: Message $n was $size_i byte(s).\n" if $verbose_p;
      }
      $n += 1; # increment counter only after pipe for the current message is closed
      print STDERR "\n" if $verbose_p && $n > 1;

      if (defined $skip && $n <= $skip) {
	 printf STDERR "Skipping message $n\n" if $debug_p || $verbose_p;
	 open(OUTPUT, '>', '/dev/null');
	 $pipe_opened_p = -1;
      } else {
	 my @cmdline = ('mailpostgw', '--tag', "msg $n", '-k');
	 push @cmdline, '-d' if $debug_p;
	 push @cmdline, '-n' if $dry_run_p;
	 push @cmdline, '-v' if $verbose_p;
	 flush STDERR;
	 $pipe_opened_p = open OUTPUT, '|-';
	 die "$appName: $cmdline[0]: fork: $!\n" unless defined $pipe_opened_p;
	 if (!$pipe_opened_p) {
	    printf STDERR "Executing command: %s\n", join(' ', @cmdline) if $debug_p || $verbose_p;
	    flush STDERR;
	    exec { $cmdline[0] } @cmdline;
	    die "$appName: $cmdline[0]: exec: $!\n";
	 }
	 printf STDERR "$appName: Message $n will be sent to %s\n", join(' ', @cmdline) if $verbose_p;
	 flush STDERR;
      }

      # Don't bother send the From_ header to mailpostgw because it's not a real header and contains no useful information
      $size_i = 0;
   } else {
      print OUTPUT $s;
   }
}
if ($pipe_opened_p) {
   close OUTPUT;
   print STDERR "$appName: Message $n was $size_i byte(s).\n" if $verbose_p;
}
print STDERR "$appName: $n message(s) of total size $size_total byte(s) processed.\n" if $verbose_p;
